1-bit adder/sub:

module full_adder(S, Cout, A, B, Cin);
   output S,Cout;
   input  A,B,Cin;
  
   wire   w1,w2,w3,w4;
      
   xor(w1, A, B);
   xor(S, Cin, w1);
   and(w2, A, B);   
   and(w3, A, Cin);
   and(w4, B, Cin);   
   or(Cout, w2, w3, w4);
endmodule 

**************************************************

4-bit adder/sub:

module full_adder_subtractor(S, C, V, A, B, Op);
   output [3:0] S;   
   output 	C,V;    
   input [3:0] 	A;   
   input [3:0] 	B;   
   input 	Op;  
   
   wire 	C0 ,C1,C2,C3,B0,B1,B2,B3; 
     
   xor(B0, B[0], Op);
   xor(B1, B[1], Op);
   xor(B2, B[2], Op);
   xor(B3, B[3], Op);
   xor(C, C3, Op);     
   xor(V, C3, C2);    
   
   full_adder fa0(S[0], C0, A[0], B0, Op);   
   full_adder fa1(S[1], C1, A[1], B1, C0);
   full_adder fa2(S[2], C2, A[2], B2, C1);
   full_adder fa3(S[3], C3, A[3], B3, C2);    
endmodule 

**************************************************

BCD adder/sub:

module BCD_adder_subtractor (A,B , Cin , SUM , Cout);
input [3:0] A,B;
input Cin;
output [3:0] SUM ;
output Cout;

wire [3:0] S1,S2;
wire C_out;
wire [3:0] w;


full_adder_subtractor(S1,C_out ,V,A,B,Cin);


and (S2[0],S1[1],S1[3]);
and (S2[1],S1[2],S2[3]);
or (S2[2],S2[0],S2[1],C_out);
and (w[1],'b1,S2[2]);
and (w[2],'b1,S2[2]);


full_adder_subtractor(SUM,Cout,V,S1,w,0);

endmodule 
**************************************************
MAX :

module max (input [3:0] A, 
            input [3:0] B, 
            output reg [3:0] max);
  always @* begin
    if (A>B)
      max = A;
    else if (A<B)
      max = B;
      else 
      max = 0;
  end
endmodule 

**************************************************

MIN:

module min (input [3:0] A, 
            input [3:0] B, 
            output reg [3:0] min);
  always @* begin
    if (A<B)
      min = A;
    else if (A>B)
      min = B;
      else 
      min = 0;
  end
endmodule 

**************************************************

MUX 4 to 1:

module mux4 ( input [3:0] a,               
                         input [3:0] b,                 
                         input [3:0] c,                 
                         input [3:0] d,                 
                         input [1:0] sel,               
                         output [3:0] out);             


   assign out = sel[1] ? (sel[0] ? d : c) : (sel[0] ? b : a);

endmodule 